Project Documentation

Key Components

--Home

The entry point of the application that orchestrates the layout and state management between the navbar, main content area, and the history window.

--State:
isHistoryVisible: Controls the visibility of the HistoryWindow.

--Functionality:
toggleHistoryWindow: A function to toggle the visibility of the HistoryWindow.

--NavBar
Displays the application's navigation bar, showcasing the brand logo and offering navigation options.
--Functionality:
Allows users to select different modes or functionalities within the application.
Highlights the currently active option.
--ImagePart
A reusable component for displaying images with specified source, dimensions, and additional CSS classes for styling.

--ButtonPart
A generic button component used across the application for various actions, capable of displaying icons and text.

--MainPart
Serves as the main content area of the application, hosting the ReWrite component and CodeConsole for text rewriting and code generation functionalities.

--Props:
toggleHistoryWindow: Function to toggle the history window's visibility.
isHistoryVisible: Indicates whether the history window is visible.
--State:
script: Stores the output from the ReWrite component to be displayed in the CodeConsole.
--ReWrite
Allows users to input text for rewriting or code generation. Users can specify parameters such as language, tone, creativity, and point of view.

--Props:
setScript: Function to update the script state in the MainPart component.
--Functionality:
Users can input text and select options for language, tone, creativity level, and point of view.
Submits the text and selected options to the backend for processing.
--CodeConsole
Displays the output generated by the ReWrite component, allowing users to view the rewritten text or generated code.

--HistoryWindow
Shows a history of past queries made by the user, providing insights into previous inputs and outputs.

--Props:
isVisible: Controls the visibility of the component.
onClose: Function to hide the component.
WriteText API Function
Sends requests to a backend service, submitting user inputs along with specified parameters to generate rewritten texts or code.

--Parameters:
text: The text to be rewritten or used for code generation.
selectedLanguage: The language in which the output should be generated.
Additional optional parameters for tone, creativity, point of view, and desired length.

--Implementation Notes
The project utilizes React hooks for state management and functional component patterns for reusability and composability.
Tailwind CSS is used for styling, providing a utility-first CSS framework for rapid UI development.
Axios is employed for HTTP requests to interact with the backend service, encapsulated within the WriteText function.